name: check spotify version
on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-version-check]
  
jobs:
  check-version:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download latest release
        shell: pwsh
        run: |
          $repo = "${{ github.repository }}"
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/$repo/releases/latest"
          $asset = $release.assets | Where-Object { $_.name -like "*.exe" } | Select-Object -First 1
          
          if ($asset) {
            Write-Host "Downloading: $($asset.name)"
            Invoke-WebRequest -Uri $asset.browser_download_url -OutFile "web_search.exe"
            Write-Host "Downloaded successfully"
          } else {
            Write-Error "No .exe file found in latest release"
            exit 1
          }
      
      - name: Run version checker
        id: check
        shell: pwsh
        run: |
          Write-Host "Running web_search.exe..."
          
          $output = & .\web_search.exe 2>&1
          
          $output | Where-Object { $_ -notmatch '^\{' } | ForEach-Object { Write-Host $_ }
          
          $jsonLine = $output | Where-Object { $_ -match '^\{.*"success"' } | Select-Object -First 1
          
          if ($jsonLine) {
            Write-Host "`nJSON Output:"
            Write-Host $jsonLine
            
            $json = $jsonLine | ConvertFrom-Json
            
            echo "SUCCESS=$($json.success)" >> $env:GITHUB_OUTPUT
            echo "IS_NEW=$($json.is_new)" >> $env:GITHUB_OUTPUT
            echo "KEY=$($json.key)" >> $env:GITHUB_OUTPUT
            
            if ($json.data.clientVersion) {
              echo "CLIENT_VERSION=$($json.data.clientVersion)" >> $env:GITHUB_OUTPUT
            }
            
            if ($json.message) {
              echo "MESSAGE=$($json.message)" >> $env:GITHUB_OUTPUT
            }
            
            if ($json.error) {
              echo "ERROR=$($json.error)" >> $env:GITHUB_OUTPUT
            }
          } else {
            Write-Error "No JSON output found"
            exit 1
          }
      
      - name: Commit new version
        if: steps.check.outputs.SUCCESS == 'true' && steps.check.outputs.IS_NEW == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add versions_web.json
          git commit -m "Added version ${{ steps.check.outputs.CLIENT_VERSION }}"
          git push
      
      - name: Version status
        if: steps.check.outputs.SUCCESS == 'true'
        run: |
          echo "${{ steps.check.outputs.MESSAGE }}"
      
      - name: Error occurred
        if: steps.check.outputs.SUCCESS == 'false'
        run: |
          echo "Error: ${{ steps.check.outputs.ERROR }}"
          exit 1
